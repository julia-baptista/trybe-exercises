const assert = require('assert');

const sum = (num1, num2) => num1 + num2;

const expected = sum(5, 4);

// assert.strictEqual(expected, '9', '5 + 4 = 9');
assert.notStrictEqual(expected, 9, '5 + 4 = 9');



/**************************************************************************************************

assert.strictEqual(50, 50); // Sem erros: 50 == 50
assert.strictEqual(50, 70); // AssertionError: 50 == 70

 **************************************************************************************************/
 

/**************************************************************************************************

function division(x, y) {
  return x / y;
}

const expected = division(9, 3);

assert.strictEqual(expected, 3, 'Nove dividido por tr√™s √© igual a tr√™s');

 **************************************************************************************************/


/**************************************************************************************************
// Podemos combinar v√°rios m√©todos do assert quando escrevemos nossos testes. Isso pode ser muito √∫til para ampliar a cobertura do teste em casos de falhas! Observe:

function add(a, b) {
  return a + b;
}

const expected = add(1, 2);

1) assert.ok(expected === 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro argumento √© verdadeiro

2) assert.strictEqual(expected, 3, 'Um mais dois √© igual a tr√™s'); // Checa se o primeiro e segundo argumentos s√£o iguais em valor e tipo (===)

3) assert.notStrictEqual(expected, 4, 'Um mais dois √© igual a tr√™s (e n√£o quatro!)'); // Checa se o primeiro e segundo argumentos s√£o diferentes (!==)

 **************************************************************************************************/


/**************************************************************************************************
// √â poss√≠vel tamb√©m testar estruturas como arrays e objetos:

const list1 = [1, 2, 3, 4, 5];
const list2 = [1, 2, 3, 4, 5];

assert.deepStrictEqual(list1, list2, 'Erro: list1 e list2 n√£o s√£o estritamente iguais');

const person1 = { name: 'john', age: 21 };
const person2 = { name: 'john', age: 21 };

assert.deepStrictEqual(person1, person2, 'Erro: person1 e person2 n√£o s√£o estritamente iguais');

const person3 = { name: 'john', age: 19 };

assert.notDeepStrictEqual(person1, person3, 'Erro: os valores dos objetos s√£o estritamente iguais');

 **************************************************************************************************/

/**************************************************************************************************
// Um papel dos testes unit√°rios √© nos ajudar a implementar fun√ß√µes mais robustas. Veja, por exemplo, a fun√ß√£o que realiza a divis√£o utilizada no modelo anterior:

function division(x, y) {
  return x / y;
}

assert.strictEqual(division(10, 2), 5); // OK
assert.strictEqual(division(10, 0), 0); // üí£

O primeiro assert.strictEqual funciona e n√£o apresenta erro, mas o segundo deixa evidente uma fragilidade na implementa√ß√£o da fun√ß√£o division , pois n√£o poderia ser poss√≠vel realizar a divis√£o por 0. Nesse caso, devemos melhorar a implementa√ß√£o da fun√ß√£o division , a fim de n√£o termos mais esse estado inconsistente.

 **************************************************************************************************/


/**************************************************************************************************
// Podemos fazer isso usando a palavra chave throw , que no javascript serve para lan√ßar um erro. Usaremos ele, ent√£o, para lan√ßar um erro caso o divisor y seja igual a zero:

function division(x, y) {
  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}

assert.strictEqual(division(10, 2), 5); // OK
assert.throws(() => { division(10, 0); }, /^Error: parameter y must not be 0$/); // OK

Atualizamos o teste para refletir a mudan√ßa de implementa√ß√£o para essa situa√ß√£o, verificando n√£o s√≥ se o erro √© lan√ßado, mas tamb√©m se √© o erro esperado. Ou seja, os testes unit√°rios tamb√©m nos ajudam a identificar casos especiais que podem levar nossas fun√ß√µes a estados inv√°lidos.

O ato de criar erros novos, tamb√©m chamado de lan√ßar exce√ß√µes , √© algo important√≠ssimo para casos em que o c√≥digo em si executa normalmente pelos padr√µes da linguagem, , mas a pessoa que o escreveu n√£o quer que ele execute nessa hip√≥tese espec√≠fica.

Nesse caso, com o erro sendo lan√ßado dentro de uma fun√ß√£o, a sua execu√ß√£o ir√° parar naquele exato momento e, caso n√£o exista um bloco de captura do erro que indique o que fazer quando ele ocorre (voc√™ ir√° aprender mais sobre isso ao estudar JS Ass√≠ncrono e Promises), o programa como um todo ter√° a sua execu√ß√£o interrompida.

 **************************************************************************************************/


// Ainda assim, se voc√™ tiver interesse em saber mais sobre o assunto, consulte as documenta√ß√µes de throw e Error .

// throw: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Statements/throw

// Error: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Error

